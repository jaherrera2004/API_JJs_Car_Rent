CREATE TABLE `tbl_reservas` (
	`id` INTEGER NOT NULL AUTO_INCREMENT UNIQUE,
	`fecha_inicio` TIMESTAMP,
	`fecha_fin` TIMESTAMP,
	`id_estado` INTEGER,
	`id_vehiculo` INTEGER,
	`id_usuario` INTEGER,
	PRIMARY KEY(`id`)
);

CREATE TABLE `tbl_estado_reserva` (
	`id` INTEGER NOT NULL AUTO_INCREMENT UNIQUE,
	`estado` VARCHAR(255),
	`descripcion` VARCHAR(255),
	PRIMARY KEY(`id`)
);

ALTER TABLE `tbl_reservas`
ADD FOREIGN KEY(`id_usuario`) REFERENCES `tbl_usuarios`(`id`)
ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE `tbl_reservas`
ADD FOREIGN KEY(`id_estado`) REFERENCES `tbl_estado_reserva`(`id`)
ON UPDATE CASCADE ON DELETE CASCADE;
ALTER TABLE `tbl_reservas`
ADD FOREIGN KEY(`id_vehiculo`) REFERENCES `tbl_vehiculos`(`id`)
ON UPDATE CASCADE ON DELETE CASCADE;

INSERT INTO `tbl_estado_reserva` (`estado`, `descripcion`)
VALUES
('Pendiente', 'Reserva en espera de confirmación'),
('Confirmada', 'Reserva confirmada y asegurada'),
('En Proceso', 'Vehículo está siendo preparado para la reserva'),
('Completada', 'Reserva finalizada y vehículo devuelto'),
('Cancelada', 'Reserva cancelada por el usuario o por el sistema'),
('Rechazada', 'Reserva rechazada debido a incumplimiento de condiciones'),
('Expirada', 'Reserva ha expirado sin confirmación o uso');

CREATE TABLE `tbl_facturas` (
	`id` INTEGER NOT NULL AUTO_INCREMENT UNIQUE,
	`valor` FLOAT,
	`fecha` TIMESTAMP,
	`id_estado` INTEGER,
	`descripcion` TEXT(65535),
	`id_reserva` INTEGER,
	PRIMARY KEY(`id`)
);


CREATE TABLE `tbl_estados_facturas` (
	`id` INTEGER NOT NULL AUTO_INCREMENT UNIQUE,
	`estado` VARCHAR(255),
	`descripcion` VARCHAR(255),
	PRIMARY KEY(`id`)
);

ALTER TABLE `tbl_facturas`
ADD FOREIGN KEY(`id_reserva`) REFERENCES `tbl_reservas`(`id`)
ON UPDATE CASCADE ON DELETE CASCADE;

INSERT INTO `tbl_estados_facturas` (`estado`, `descripcion`)
VALUES
('Pendiente', 'Factura generada pero pendiente de pago'),
('Pagada', 'Factura completamente pagada y confirmada'),
('Cancelada', 'Factura anulada por el usuario o el sistema'),
('Vencida', 'Factura vencida sin pago en el tiempo estipulado');

DELIMITER //

CREATE PROCEDURE registrar_reserva (
    IN p_fecha_inicio TIMESTAMP,
    IN p_fecha_fin TIMESTAMP,
    IN p_id_usuario INTEGER,
    IN p_id_vehiculo INTEGER,
    IN p_id_estado INTEGER
)
BEGIN
    INSERT INTO tbl_reservas (fecha_inicio, fecha_fin, id_usuario, id_vehiculo, id_estado)
    VALUES (p_fecha_inicio, p_fecha_fin, p_id_usuario, p_id_vehiculo, p_id_estado);
END //

DELIMITER ;

DELIMITER //

CREATE TRIGGER after_reserva_insert
AFTER INSERT ON tbl_reservas
FOR EACH ROW
BEGIN
    DECLARE valor_dia FLOAT;
    DECLARE dias INTEGER;

    -- Obtener el valor diario del vehículo reservado
    SELECT v.valor_dia INTO valor_dia
    FROM tbl_vehiculos AS v
    WHERE v.id = NEW.id_vehiculo;

    -- Calcular el número de días de la reserva
    SET dias = DATEDIFF(NEW.fecha_fin, NEW.fecha_inicio);

    -- Insertar la factura en tbl_facturas
    INSERT INTO tbl_facturas (valor, fecha, id_estado, descripcion, id_reserva)
    VALUES (valor_dia * dias, NOW(), 1, 'Factura generada automáticamente para la reserva', NEW.id);
END //

DELIMITER ;

INSERT INTO tbl_permisos (permiso, descripcion) VALUES ('reserva:crear','Permiso para crear una reserva');

INSERT INTO tbl_rol_detalles(id_permiso, id_rol) VALUES
((SELECT id FROM tbl_permisos WHERE permiso='reserva:crear'),1);

CREATE VIEW ver_reservas AS
SELECT
    r.id,
    r.id_vehiculo,
    r.id_usuario,
    r.id_estado,
    r.fecha_inicio,
    r.fecha_fin
FROM
    tbl_reservas r;

INSERT INTO tbl_permisos (permiso, descripcion) VALUES ('reserva:obtener-lista','Permiso para obtener la lista de reservas');

INSERT INTO tbl_rol_detalles(id_permiso, id_rol) VALUES
((SELECT id FROM tbl_permisos WHERE permiso='reserva:obtener-lista'),1);

INSERT INTO tbl_permisos (permiso, descripcion) VALUES ('reserva:obtener-lista-por-usuario','Permiso para obtener la lista de reservas por usuario');

INSERT INTO tbl_rol_detalles(id_permiso, id_rol) VALUES
((SELECT id FROM tbl_permisos WHERE permiso='reserva:obtener-lista-por-usuario'),1);

INSERT INTO tbl_permisos (permiso, descripcion) VALUES ('reserva:actualizar','Permiso para actualizar el estado de una reserva');

INSERT INTO tbl_rol_detalles(id_permiso, id_rol) VALUES
((SELECT id FROM tbl_permisos WHERE permiso='reserva:actualizar'),1);

DELIMITER //

CREATE FUNCTION vehiculo_disponible(id_vehiculo INT, fecha_inicio TIMESTAMP, fecha_fin TIMESTAMP)
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
    DECLARE disponible BOOLEAN;

    SET disponible = NOT EXISTS (
        SELECT 1
        FROM tbl_reservas AS r
        WHERE r.id_vehiculo = id_vehiculo
          AND r.fecha_inicio < fecha_fin
          AND r.fecha_fin > fecha_inicio
          AND r.id_estado IN (
              SELECT id FROM tbl_estado_reserva WHERE estado IN ('Pendiente', 'Confirmada')
          )
    );

    RETURN disponible;
END //

DELIMITER ;

SELECT vehiculo_disponible(12, '2024-11-12', '2024-11-14') AS disponible;

CREATE VIEW ver_vehiculos_activos_por_tipo AS
SELECT
    v.id AS id_vehiculo,
    v.placa,
    v.anio,
    v.kilometraje,
    v.valor_dia,
    v.color,
    m.modelo,
    t.tipo AS tipo_vehiculo,
    t.id AS id_tipo_vehiculo
FROM
    tbl_vehiculos v
JOIN
    tbl_modelos m ON v.id_modelo = m.id
JOIN
    tbl_tipo_vehiculo t ON m.id_tipo_vehiculo = t.id
WHERE
    v.activo = TRUE;

    INSERT INTO tbl_permisos (permiso, descripcion) VALUES ('vehiculo:obtener-lista-disponibles','Permiso para obtener la lista de vehiculos disponibles en un rango de fechas segun el tipo de vehiculo');

    INSERT INTO tbl_rol_detalles(id_permiso, id_rol) VALUES
    ((SELECT id FROM tbl_permisos WHERE permiso='vehiculo:obtener-lista-disponibles'),1);



