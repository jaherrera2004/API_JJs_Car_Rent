DELIMITER //

CREATE PROCEDURE registrar_usuario (
    IN p_cedula VARCHAR(20),
    IN p_nombre VARCHAR(50),
    IN p_apellido VARCHAR(50),
    IN p_edad INT,
    IN p_username VARCHAR(20),
    IN p_email VARCHAR(100),
    IN p_telefono VARCHAR(20),
    IN p_contrasenia VARCHAR(255),
    IN p_activo BOOLEAN,
    IN p_id_rol INT
)
BEGIN
    INSERT INTO tbl_usuarios (cedula, nombre, apellido, edad,username, email, telefono, contrasenia, activo, id_rol)
    VALUES (p_cedula, p_nombre, p_apellido, p_edad,p_username, p_email, p_telefono, p_contrasenia, p_activo, p_id_rol);
END //

DELIMITER;
------------------------------------------------------------------------------------------------------------------------
DELIMITER $$

CREATE PROCEDURE agregar_marca (
    IN p_marca VARCHAR(20),
    IN p_activo BOOLEAN

)
BEGIN
    INSERT INTO tbl_marcas (marca,activo) VALUES (p_marca,p_activo);
END$$

DELIMITER;
------------------------------------------------------------------------------------------------------------------------
DELIMITER $$

CREATE PROCEDURE desactivar_usuario (IN p_id INTEGER)

BEGIN
    UPDATE tbl_usuarios SET activo=false WHERE id=p_id;
END$$

DELIMITER;
------------------------------------------------------------------------------------------------------------------------
DELIMITER $$

CREATE PROCEDURE desactivar_marca (IN p_id INTEGER)

BEGIN
    UPDATE tbl_marcas SET activo=false WHERE id=p_id;
END$$

DELIMITER ;
------------------------------------------------------------------------------------------------------------------------
DELIMITER $$

CREATE PROCEDURE activar_marca (IN p_id INTEGER)

BEGIN
    UPDATE tbl_marcas SET activo=true WHERE id=p_id;
END$$

DELIMITER ;
------------------------------------------------------------------------------------------------------------------------
DELIMITER $$

CREATE PROCEDURE activar_usuario (IN p_id INTEGER)

BEGIN
    UPDATE tbl_usuarios SET activo=true WHERE id=p_id;
END$$

DELIMITER ;
------------------------------------------------------------------------------------------------------------------------
DELIMITER $$

CREATE PROCEDURE desactivar_usuario (IN p_id INTEGER)

BEGIN
    UPDATE tbl_usuarios SET activo=false WHERE id=p_id;
END$$

DELIMITER ;
------------------------------------------------------------------------------------------------------------------------
DELIMITER //

CREATE PROCEDURE agregar_modelo(
    IN p_modelo VARCHAR(50),
    IN p_id_marca INTEGER,
    IN p_id_tipo_vehiculo INTEGER,
    IN p_activo BOOLEAN
)
BEGIN
    INSERT INTO tbl_modelos (id_marca, id_tipo_vehiculo, modelo, activo)
    VALUES (p_id_marca, p_id_tipo_vehiculo, p_modelo, p_activo);
END //

DELIMITER ;
------------------------------------------------------------------------------------------------------------------------
DELIMITER //

CREATE PROCEDURE agregar_vehiculo(
    IN placa VARCHAR(10),
    IN anio INT,
    IN kilometraje FLOAT,
    IN valorDia FLOAT,
    IN color VARCHAR(20),
    IN idModelo INT,
    IN activo BOOLEAN
)
BEGIN
    INSERT INTO tbl_vehiculos (
        placa, anio, kilometraje, valor_dia, color, id_modelo, activo
    )
    VALUES (
        placa, anio, kilometraje, valorDia, color, idModelo, activo
    );
END //

DELIMITER ;
----------------------------------------------------------------------------------------
DELIMITER //

	CREATE PROCEDURE desactivar_vehiculo( IN p_id INTEGER)
	BEGIN

		UPDATE tbl_vehiculos
		SET activo = false
		WHERE id=p_id;

	END//

DELIMITER ;
--------------------

CREATE PROCEDURE desactivar_modelo(IN p_id INTEGER)
BEGIN
    DECLARE v_id_vehiculo INTEGER;
    DECLARE done BOOLEAN DEFAULT FALSE;

    -- Declaración de cursor y manejador de errores antes de la transacción
    DECLARE vehiculos_cursor CURSOR FOR
    SELECT id FROM tbl_modelos WHERE id_modelo = p_id;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Manejador de errores para hacer ROLLBACK si ocurre un error
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    -- Iniciar la transacción
    START TRANSACTION;

    -- Actualizar el modelo para desactivarlo
    UPDATE tbl_modelos
    SET activo = FALSE
    WHERE id = p_id;

    -- Abrir el cursor
    OPEN vehiculos_cursor;

    -- Bucle para desactivar cada vehículo asociado al modelo
    vehiculo_loop: LOOP
        FETCH vehiculos_cursor INTO v_id_vehiculo;

        IF done THEN
            LEAVE vehiculo_loop;
        END IF;

        -- Llamar al procedimiento para desactivar el vehículo
        CALL desactivar_vehiculo(v_id_vehiculo);
    END LOOP;

    -- Cerrar el cursor
    CLOSE vehiculos_cursor;

    -- Confirmar la transacción
    COMMIT;
END //

DELIMITER ;
------------------------------------------------------------------------
DROP PROCEDURE IF EXISTS desactivar_modelo;

DELIMITER //

CREATE PROCEDURE desactivar_tipo_vehiculo(IN p_id INTEGER)
BEGIN
    DECLARE v_id_modelo INTEGER;
    DECLARE done BOOLEAN DEFAULT FALSE;

    -- Declaración de cursor y manejador de errores antes de la transacción
    DECLARE tipo_vehiculos_cursor CURSOR FOR
    SELECT id FROM tbl_tipo_vehiculos WHERE id_modelo = p_id;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Manejador de errores para hacer ROLLBACK si ocurre un error
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    -- Iniciar la transacción
    START TRANSACTION;

    -- Actualizar el modelo para desactivarlo
    UPDATE tbl_tipo_vehiculo
    SET activo = FALSE
    WHERE id = p_id;

    -- Abrir el cursor
    OPEN tipo_vehiculos_cursor;

    -- Bucle para desactivar cada vehículo asociado al modelo
    modelo_loop: LOOP
        FETCH tipo_vehiculos_cursor INTO v_id_modelo;

        IF done THEN
            LEAVE modelo_loop;
        END IF;

        -- Llamar al procedimiento para desactivar el vehículo
        CALL desactivar_modelo(v_id_modelo);
    END LOOP;

    -- Cerrar el cursor
    CLOSE tipo_vehiculos_cursor;

    -- Confirmar la transacción
    COMMIT;
END //

DELIMITER ;
